(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[3906],{3906:n=>{n.exports="import {isPlatformServer} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    inject,\n    Injectable,\n    PLATFORM_ID,\n    ViewChild,\n} from '@angular/core';\nimport {FormControl, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {DomSanitizer, type SafeHtml} from '@angular/platform-browser';\nimport {TuiContentTable} from '@demo/shared/content-table';\nimport {TUI_IS_E2E, tuiPure, tuiTypedFromEvent} from '@taiga-ui/cdk';\nimport {\n    provideTuiEditor,\n    TUI_ATTACH_FILES_LOADER,\n    TUI_ATTACH_FILES_OPTIONS,\n    TuiEditor,\n    type TuiEditorAttachedFile,\n    TuiEditorTool,\n} from '@taiga-ui/editor';\nimport {map, type Observable, of, switchMap} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpMockUploader {\n    public save(_base64: string): Observable<string> {\n        return of(\n            // mock\n            'https://private-user-images.githubusercontent.com/20438370/398424241-231fe6f0-6c0a-481f-8856-f5da3a10f06b.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkyNzk0ODksIm5iZiI6MTczOTI3OTE4OSwicGF0aCI6Ii8yMDQzODM3MC8zOTg0MjQyNDEtMjMxZmU2ZjAtNmMwYS00ODFmLTg4NTYtZjVkYTNhMTBmMDZiLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAyMTElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMjExVDEzMDYyOVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM5YTQ1ZDI2ZGE5ZjQ4MzBjNmEzNTIzN2JjMjE0ZWFkYjg0OGQyYmI4NGU0NTQ0Y2Q2MjYyNWI0MmFjNDgxYTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.8idoj74wxtWsQgdhSL09qvWp62Mv7Mzkl3uuiDYUyD4',\n        );\n    }\n}\n\n@Component({\n    standalone: true,\n    imports: [ReactiveFormsModule, TuiContentTable, TuiEditor],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        provideTuiEditor({\n            video: true,\n            audio: true,\n            source: true,\n        }),\n        {\n            provide: TUI_ATTACH_FILES_LOADER,\n            deps: [HttpMockUploader],\n            useFactory:\n                (uploader: HttpMockUploader) =>\n                ([file]: File[]): Observable<\n                    Array<TuiEditorAttachedFile<{type: string}>>\n                > => {\n                    if (!file) {\n                        return of([]);\n                    }\n\n                    const fileReader = new FileReader();\n\n                    fileReader.readAsDataURL(file);\n\n                    return tuiTypedFromEvent(fileReader, 'load').pipe(\n                        switchMap(() => uploader.save(String(fileReader.result))),\n                        map((link) => [\n                            {\n                                // Do not return base64 instead of link to binary\n                                // because it's bad idea for your performance\n\n                                link,\n\n                                name: file.name,\n                                attrs: {type: file.type},\n                            },\n                        ]),\n                    );\n                },\n        },\n        {\n            provide: TUI_ATTACH_FILES_OPTIONS,\n            useValue: {\n                accept: 'video/mp4,video/x-m4v,video/*,audio/x-m4a,audio/*',\n                multiple: false,\n            },\n        },\n    ],\n    host: {\n        class: 'html5-editor-example',\n        '[class._e2e]': 'isE2E',\n    },\n})\nexport default class Example {\n    @ViewChild(TuiEditor)\n    private readonly wysiwyg?: TuiEditor;\n\n    private readonly sanitizer = inject(DomSanitizer);\n    private readonly isNotStatic =\n        inject(TUI_IS_E2E) || isPlatformServer(inject(PLATFORM_ID));\n\n    protected readonly isE2E = inject(TUI_IS_E2E);\n\n    protected readonly builtInTools = [\n        TuiEditorTool.Undo,\n        TuiEditorTool.Link,\n        TuiEditorTool.Attach,\n    ];\n\n    protected readonly control = new FormControl(\n        this.isNotStatic\n            ? ''\n            : `\n            <p>Here is video: </p>\n\n            <video controls=\"controls\" width=\"100%\" preload=\"auto\" controlsList=\"nodownload\">\n                <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n            </video>\n\n            <p>Here is audio: </p>\n            <audio controls style=\"width: 100%\" preload=\"auto\" controlsList=\"nodownload\">\n              <source src=\"https://www.w3docs.com/build/audios/audio.mp3\" type=\"audio/mp3\">\n            </audio>\n\n            <p></p>\n            `,\n        Validators.required,\n    );\n\n    @tuiPure\n    protected safe(content: string | null): SafeHtml {\n        return this.sanitizer.bypassSecurityTrustHtml(content ?? '');\n    }\n\n    protected attach([file]: Array<TuiEditorAttachedFile<{type: string}>>): void {\n        const tag = `${file?.attrs?.type ?? ''}`.split('/')[0];\n\n        this.wysiwyg?.editor\n            ?.getOriginTiptapEditor()\n            ?.commands.insertContent(\n                `<${tag} controls width=\"100%\"><source src=\"${file?.link}\" type=\"${file?.attrs?.type}\"></${tag}><p><a href=\"${file?.link}\" download=\"${file?.name}\">Download ${file?.name}</a></p>`,\n            );\n    }\n}\n"}}]);