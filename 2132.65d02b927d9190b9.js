(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[2132],{2132:n=>{n.exports="import {AsyncPipe, NgForOf} from '@angular/common';\nimport {ChangeDetectionStrategy, Component, inject} from '@angular/core';\nimport {WINDOW} from '@ng-web-apis/common';\nimport {tuiPure} from '@taiga-ui/cdk';\nimport {TuiButton, TuiDataList, TuiDropdown} from '@taiga-ui/core';\nimport {TuiTiptapEditorService} from '@taiga-ui/editor';\nimport {distinctUntilChanged, map} from 'rxjs';\n\n@Component({\n    standalone: true,\n    selector: 'font-size-tool',\n    imports: [AsyncPipe, NgForOf, TuiButton, TuiDataList, TuiDropdown],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExampleTuiFontSizeTool {\n    private readonly editor = inject(TuiTiptapEditorService);\n    private readonly win = inject(WINDOW);\n\n    protected readonly sizes = [8, 9, 10, 11, 12, 14, 16, 18, 24, 30];\n\n    protected readonly size$ = this.editor.valueChange$.pipe(\n        map(() => this.fontSize),\n        distinctUntilChanged(),\n    );\n\n    protected get fontSize(): number {\n        return (\n            this.editor.getFontSize() ||\n            this.getDefaultFontSize(this.editor.getOriginTiptapEditor()?.view.dom) ||\n            16\n        );\n    }\n\n    protected setFontSize(size: number): void {\n        this.editor.setFontSize(size);\n    }\n\n    protected increase(): void {\n        const newIndex = this.currentIndex + 1;\n\n        if (newIndex <= this.sizes.length - 1) {\n            const newSize = this.sizes[newIndex] ?? 0;\n\n            if (newSize > 0) {\n                this.setFontSize(newSize);\n            }\n        }\n    }\n\n    protected decrease(): void {\n        const newIndex = this.currentIndex - 1;\n\n        if (newIndex > 0) {\n            const newSize = this.sizes[newIndex] ?? 0;\n\n            if (newSize > 0) {\n                this.setFontSize(newSize);\n            }\n        }\n    }\n\n    private get currentIndex(): number {\n        return this.sizes.indexOf(this.fontSize);\n    }\n\n    @tuiPure\n    private getDefaultFontSize(element?: Element): number {\n        return element\n            ? Number(\n                  /\\d+/.exec(\n                      this.win.getComputedStyle(element).getPropertyValue('font-size'),\n                  )?.[0],\n              )\n            : 16;\n    }\n}\n"}}]);