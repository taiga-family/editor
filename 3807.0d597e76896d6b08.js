(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[3807],{3807:e=>{e.exports="import {AsyncPipe} from '@angular/common';\nimport {ChangeDetectionStrategy, Component, inject, ViewChild} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {TuiContentTable} from '@demo/shared/content-table';\nimport {TuiLoader} from '@taiga-ui/core';\nimport {\n    provideTuiEditor,\n    TUI_ATTACH_FILES_LOADER,\n    TuiEditor,\n    type TuiEditorAttachedFile,\n    TuiEditorTool,\n} from '@taiga-ui/editor';\n\nimport {fileLoader} from './file-loader';\nimport {FileIoService} from './filesio.service';\n\n@Component({\n    standalone: true,\n    imports: [AsyncPipe, ReactiveFormsModule, TuiContentTable, TuiEditor, TuiLoader],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        provideTuiEditor(),\n        {\n            provide: TUI_ATTACH_FILES_LOADER,\n            deps: [FileIoService],\n            useFactory: fileLoader,\n        },\n    ],\n})\nexport default class Example {\n    @ViewChild(TuiEditor)\n    private readonly wysiwyg?: TuiEditor;\n\n    protected readonly fileIoService = inject(FileIoService);\n\n    protected readonly builtInTools = [\n        TuiEditorTool.Undo,\n        TuiEditorTool.Link,\n        TuiEditorTool.Attach,\n    ];\n\n    protected control = new FormControl('');\n\n    /**\n     * @note: attach file as a link\n     * you can also implement your own file mapping mechanism\n     * because you have all the necessary data for this\n     */\n    protected attach(files: TuiEditorAttachedFile[]): void {\n        files.forEach((file) => this.wysiwyg?.editor?.setFileLink(file));\n    }\n}\n"}}]);