(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[2855],{2855:n=>{n.exports="import {NgForOf} from '@angular/common';\nimport type {OnInit} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    ElementRef,\n    inject,\n    ViewChild,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {\n    TuiDataList,\n    TuiDataListComponent,\n    TuiDropdown,\n    TuiTextfield,\n} from '@taiga-ui/core';\nimport {TUI_EDITOR_EXTENSIONS, TuiEditor, TuiEditorTool} from '@taiga-ui/editor';\n\ninterface MyCommand {\n    name: string;\n}\n\n@Component({\n    standalone: true,\n    imports: [\n        NgForOf,\n        ReactiveFormsModule,\n        TuiDataList,\n        TuiDropdown,\n        TuiEditor,\n        TuiTextfield,\n    ],\n    templateUrl: './index.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_EDITOR_EXTENSIONS,\n            useFactory: () => [\n                import('@taiga-ui/editor').then(({TuiStarterKit}) => TuiStarterKit),\n                import('@tiptap/extension-text-style').then(({TextStyle}) => TextStyle),\n                import('@taiga-ui/editor').then(({TuiLink}) => TuiLink),\n                import('@taiga-ui/editor').then(({TuiJumpAnchor}) => TuiJumpAnchor),\n            ],\n        },\n    ],\n    host: {\n        '(window:keydown.arrowUp)': 'down($event, false)',\n        '(window:keydown.arrowDown)': 'down($event, true)',\n    },\n})\nexport default class Example implements OnInit {\n    private readonly destroy$ = inject(DestroyRef);\n\n    @ViewChild(TuiEditor, {static: true})\n    protected readonly wysiwyg?: TuiEditor;\n\n    @ViewChild(TuiDataListComponent, {read: ElementRef})\n    protected datalist?: ElementRef<HTMLDivElement>;\n\n    protected open = true;\n\n    protected readonly builtInTools = [\n        TuiEditorTool.Undo,\n        TuiEditorTool.Bold,\n        TuiEditorTool.Italic,\n        TuiEditorTool.Link,\n        TuiEditorTool.Anchor,\n    ];\n\n    protected control = new FormControl('');\n\n    protected readonly items: readonly MyCommand[] = [\n        {name: 'Heading 1'},\n        {name: 'Heading 2'},\n        {name: 'Bold'},\n        {name: 'Italic'},\n    ];\n\n    public ngOnInit(): void {\n        this.control.valueChanges\n            .pipe(takeUntilDestroyed(this.destroy$))\n            .subscribe(() => {\n                const isLinkSelected = !!this.wysiwyg?.isLinkSelected;\n                const isMentionMode = !!this.wysiwyg?.isMentionMode;\n                const hasSlash = !!this.wysiwyg?.selectionState.before?.startsWith('/');\n\n                this.open = isMentionMode || isLinkSelected ? false : hasSlash;\n            });\n    }\n\n    protected get suggestion(): string {\n        const before = this.wysiwyg?.selectionState.before;\n\n        return before?.startsWith('/') && before.length > 1\n            ? before?.replace('/', '') || ''\n            : '';\n    }\n\n    protected down(event: Event, isDown: boolean): void {\n        const buttons = Array.from(this.el?.querySelectorAll('button') ?? []);\n        const button = isDown ? buttons[0] : buttons[buttons.length - 1];\n\n        if (!this.el?.contains(event.target as any)) {\n            button?.focus();\n        }\n    }\n\n    protected filter(search: string): readonly MyCommand[] {\n        return search?.length\n            ? this.items.filter(({name}) =>\n                  name.toLocaleLowerCase().startsWith(search.toLocaleLowerCase()),\n              )\n            : this.items;\n    }\n\n    protected command(command: MyCommand): void {\n        const editor = this.wysiwyg?.editor?.getOriginTiptapEditor();\n\n        if (!editor) {\n            return;\n        }\n\n        const {from, to} = editor.state.selection;\n\n        editor\n            .chain()\n            .focus()\n            .deleteRange({from: from - (this.suggestion.length + 1), to})\n            .run();\n\n        switch (command.name) {\n            case 'Bold':\n                editor.chain().toggleBold().run();\n                break;\n            case 'Heading 1':\n                editor.chain().setNode('heading', {level: 1}).run();\n                break;\n            case 'Heading 2':\n                editor.chain().setNode('heading', {level: 2}).run();\n                break;\n            case 'Italic':\n                editor.chain().toggleItalic().run();\n                break;\n        }\n    }\n\n    private get el(): HTMLDivElement | null {\n        return this.datalist?.nativeElement ?? null;\n    }\n}\n"}}]);