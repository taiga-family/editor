(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[8335],{8335:n=>{n.exports="import {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    inject,\n    INJECTOR,\n    type Injector,\n    type OnInit,\n    ViewChild,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TUI_EDITOR_EXTENSIONS, TuiEditor, TuiEditorTool} from '@taiga-ui/editor';\nimport {TuiTextareaModule} from '@taiga-ui/legacy';\nimport {type Editor} from '@tiptap/core';\nimport {debounceTime, Subject} from 'rxjs';\n\nconst markdown = `# h1 Heading ðŸ˜Ž\n\n## h2 Heading\n\n### h3 Heading\n\n#### h4 Heading\n\n##### h5 Heading\n\n###### h6 Heading\n\n----\n\n![image info](./assets/icons/logo.svg)\n`;\n\n@Component({\n    standalone: true,\n    imports: [FormsModule, ReactiveFormsModule, TuiEditor, TuiTextareaModule],\n    templateUrl: './index.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: TUI_EDITOR_EXTENSIONS,\n            deps: [INJECTOR],\n            useFactory: (injector: Injector) => [\n                import('@tiptap/starter-kit').then(({StarterKit}) => StarterKit),\n                import('@taiga-ui/editor').then(({tuiCreateImageEditorExtension}) =>\n                    tuiCreateImageEditorExtension({injector}),\n                ),\n                import('@taiga-ui/editor').then(({TuiMarkdown}) =>\n                    TuiMarkdown.configure({\n                        html: true, // Allow HTML input/output\n                        tightLists: true, // No <p> inside <li> in markdown output\n                        tightListClass: 'tight', // Add class to <ul> allowing you to remove <p> margins when tight\n                        bulletListMarker: '-', // <li> prefix in markdown output\n                        linkify: true, // Create links from \"https://...\" text\n                        breaks: true, // New lines (\\n) in markdown input are converted to <br>\n                        transformPastedText: true, // Allow to paste markdown text in the editor\n                        transformCopiedText: true, // Copied text is transformed to markdown\n                    }),\n                ),\n            ],\n        },\n    ],\n})\nexport default class Example implements OnInit {\n    @ViewChild(TuiEditor)\n    private readonly editorRef?: TuiEditor;\n\n    private readonly destroyRef = inject(DestroyRef);\n\n    protected markdown$ = new Subject<string>();\n\n    protected readonly builtInTools = [TuiEditorTool.Undo];\n\n    protected control: FormControl = new FormControl(markdown);\n\n    public ngOnInit(): void {\n        this.markdown$\n            .pipe(debounceTime(500), takeUntilDestroyed(this.destroyRef))\n            .subscribe((value) => this.editor?.commands.setContent(value));\n    }\n\n    protected get editor(): Editor | null {\n        return this.editorRef?.editorService.getOriginTiptapEditor() ?? null;\n    }\n\n    protected get markdown(): string {\n        return this.editor?.storage.markdown?.getMarkdown() ?? '';\n    }\n}\n"}}]);